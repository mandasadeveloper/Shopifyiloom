{% liquid
  assign now = 'now' | date: '%Y-%m-%dT%H:%M'
  assign start_time = section.settings.start_time
  assign end_time = section.settings.end_time
  assign is_ended = false
  if now >= start_time
    assign is_started = true
  endif
  if now >= end_time
    assign is_ended = false
  else
    assign is_ended = true
  endif
%}

{% assign productEvent = product.metafields.custom.product_launch_event.value %}
<div {% render 'section-properties', narrow: true %}>
  {% render 'breadcrumbs', collection: collection %}
</div>

{% if productEvent %}
  <div class="il-timerCounter section section--narrow">
    <div class="il-timerCounter__container">
      <div class="il-timerCounter__startTime">
        <div class="il-timerCounter__getValue" style="display: none;">
          {% if is_started != true %}
            <label for="endDate">Start date {{ start_time }}</label>
            <input type="text" id="endDate" data-end-date="" value="{{ start_time }}">
          {% else %}
            <label for="endDate">End date {{ end_time }}</label>
            <input type="text" id="endDate" data-end-date="" value="{{ end_time }}">
          {% endif %}
        </div>
        <div class="il-timerCounter__countDown bleed sm:unbleed">
          <div class="il-timerCounter__details">
            <p class="il-timerCounter__organizer text-p text-p--secondaryFont text-p--18">
              {{ product.title }}
            </p>
            {% if is_started != true %}
              <h3 class="il-timerCounter__heading text-p text-p--secondaryFont text-p--40">
                {{ section.settings.before_launch_heading }}
              </h3>
            {% elsif productEvent.end_date < now %}
              <h3 class="il-timerCounter__heading text-p text-p--secondaryFont text-p--40">
                {{ section.settings.before_launch_heading }}
              </h3>
            {% else %}
              <h3 class="il-timerCounter__heading text-p text-p--secondaryFont text-p--40">
                {{ section.settings.after_launch_heading }}
              </h3>
            {% endif %}
            <p class="il-timerCounter__countText text-p text-p--secondaryFont text-p--20">
              {{ section.settings.count_down_text }}
            </p>
          </div>
          <div class="il-timerCounter__countWrapper">
            <div class="il-timerCounter__count">
              <span data-days="" class="il-timerCounter__text text-p text-p--secondaryFont text-p--28">0</span>
              <span class="il-timerCounter__days text-p text-p--secondaryFont">days</span>
            </div>
            <div class="il-timerCounter__count">
              <span data-hours="" class="il-timerCounter__text text-p text-p--secondaryFont text-p--28">0</span>
              <span class="il-timerCounter__days text-p text-p--secondaryFont">hours</span>
            </div>
            <div class="il-timerCounter__count">
              <span data-minutes="" class="il-timerCounter__text text-p text-p--secondaryFont text-p--28">0</span>
              <span class="il-timerCounter__days text-p text-p--secondaryFont">mins</span>
            </div>
            <div class="il-timerCounter__count">
              <span data-seconds="" class="il-timerCounter__text text-p text-p--secondaryFont text-p--28">0</span>
              <span class="il-timerCounter__days text-p text-p--secondaryFont">secs</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <style>
    .il-timerCounter {
      min-height: 600px;
      background: url({{ section.settings.background_banner_image | img_url: 'master' }}) no-repeat;
      background-size: cover;
      padding-top: 0;
      padding-bottom: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-top: calc(var(--background-differs-from-previous) * var(--calculated-section-spacing-block-start) / 5);
    }

    .il-timerCounter__countDown {
      display: flex;
      justify-content: center;
      color: var(--color-white);
      gap: 32px;
      padding: 52px 67px;
      border-radius: 4px;
      max-width: 525px;
      flex-wrap: wrap;
      background: rgba(0, 0, 0, 0.81);
    }

    .il-timerCounter__countWrapper {
      display: flex;
      flex-direction: row;
      gap: 32px;
    }

    .il-timerCounter__days {
      display: block;
      font-size: var(--font-size-13);
      font-weight: var(--font-weight-700);
      line-height: var(--line-height-normal);
      letter-spacing: var(--letter-spacing-normal);
      text-align: var(--text-center);
      color: var(--color-white);
      text-transform: var(--text-uppercase);
    }

    .il-timerCounter__count {
      width: 100%;
      max-width: 74px;
      position: relative;
    }

    .il-timerCounter__text {
      font-weight: var(--font-weight-700);
      line-height: var(--line-height-normal);
      letter-spacing: var(--letter-spacing-normal);
      text-align: var(--text-center);
      color: var(--color-primary);
      height: 62px;
      width: 74px;
      border-radius: 4px;
      background-color: var(--color-white);
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 14px;
    }

    .il-timerCounter__countText {
      color: var(--color-light-beige);
      line-height: var(--line-height-normal);
      letter-spacing: var(--letter-spacing-normal);
    }

    .il-timerCounter__details {
      flex: 0 0 100%;
      max-width: 100%;
      text-align: var(--text-center);
    }

    .il-timerCounter__heading {
      font-weight: var(--font-weight-600);
      line-height: var(--line-height-normal);
      color: var(--color-red);
      margin-bottom: 26px;
    }

    .il-timerCounter__organizer {
      line-height: var(--line-height-normal);
      color: var(--color-red);
      margin-bottom: 6px;
    }

    @media (max-width: 768px) {
      .il-timerCounter {
        min-height: 450px;
        margin-bottom: 10px;
      }

      .il-timerCounter__text {
        font-size: var(--font-size-24);
        height: 52px;
        width: 64px;
      }

      .il-timerCounter__countWrapper {
        gap: 16px;
      }

      .il-timerCounter__count {
        max-width: 68px;
      }

      .il-timerCounter__countDown {
        padding: 50px 0;
        gap: 16px;
        width: 100%;
        max-width: 100%;
        margin: 0 auto;
      }

      .il-timerCounter__days {
        font-size: var(--font-size-12);
      }
    }

    @media screen and (max-width: 650px) {
      .il-timerCounter {
        min-height: 391px;
      }
    }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      let timer;

      function setCountdown() {
        const endDateTime = parseDateTime(document.querySelector('[data-end-date]').value);

        clearInterval(timer);

        timer = setInterval(function () {
          timeBetweenDates(endDateTime);
        }, 1000);
      }

      document.querySelector('[data-end-date]').addEventListener('change', setCountdown);

      function parseDateTime(dateTimeString) {
        const dateTime = new Date(dateTimeString);
        return dateTime;
      }

      function timeBetweenDates(endDateTime) {
        let now = new Date();
        let difference = endDateTime.getTime() - now.getTime();

        if (difference <= 0) {
          clearInterval(timer);
          document.querySelector('[data-days]').textContent = '0';
          document.querySelector('[data-hours]').textContent = '0';
          document.querySelector('[data-minutes]').textContent = '0';
          document.querySelector('[data-seconds]').textContent = '0';
        } else {
          let seconds = Math.floor(difference / 1000);
          let minutes = Math.floor(seconds / 60);
          let hours = Math.floor(minutes / 60);
          let days = Math.floor(hours / 24);

          hours %= 24;
          minutes %= 60;
          seconds %= 60;

          document.querySelector('[data-days]').textContent = days;
          document.querySelector('[data-hours]').textContent = hours;
          document.querySelector('[data-minutes]').textContent = minutes;
          document.querySelector('[data-seconds]').textContent = seconds;
        }
      }

      setCountdown();
    });
  </script>
{% endif %}

<script>
  document.addEventListener('DOMContentLoaded', function () {
    let collectionTitle = `{{ product.collections[0].title }}`;
    let collectionLink = `{{ product.collections[0].url }}`;
    let dataElement = document.querySelector('[data-collection-name]');

    if (dataElement) {
      dataElement.innerText = collectionTitle;
      dataElement.setAttribute('href', collectionLink);
    } else {
      let data = document.querySelector('[data-collection]');
      data.style.display = 'none';
    }
  });
</script>

{% schema %}
{
  "name": "Product Event Counter",
  "class": "product-main-section",
  "settings": [
    {
      "type": "text",
      "id": "before_launch_heading",
      "label": "Before Launch Heading",
      "default": "Launching soon!"
    },
    {
      "type": "text",
      "id": "after_launch_heading",
      "label": "After Launch Heading",
      "default": "Ending soon!"
    },
    {
      "type": "text",
      "id": "count_down_text",
      "label": "Count Down Text",
      "default": "THe countdown is on...."
    },
    {
      "type": "image_picker",
      "label": "Background Banner Image",
      "id": "background_banner_image"
    },
    {
      "type": "text",
      "id": "product_name",
      "label": "Product Name"
    },
    {
      "type": "text",
      "label": "Start Date",
      "id": "start_time",
      "info": "Please use this format 'YYYY-MM-DDTHH:mm' (e.g., '2023-11-03T18:00')"
    },
    {
      "type": "text",
      "label": "End Date",
      "id": "end_time",
      "info": "Please use this format 'YYYY-MM-DDTHH:mm' (e.g., '2023-11-03T18:00')"
    }
  ],
  "presets": [
    {
      "name": "Product Event Counter"
    }
  ]
}
{% endschema %}
